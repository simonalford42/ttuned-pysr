Problem,Ground Truth,Ground Truth LaTeX,BasicSR Expression,BasicSR Adjusted,BasicSR MSE,BasicSR Size,BasicSR Time (s),PySR Expression,PySR MSE,PySR Complexity,PySR Time (s)
vlad4,"10 / (5 + np.sum((X - 3) ** 2, axis=1))",\frac{10}{5 + \sum_i(x_i - 3)^2},((((0 - sin(cos(x0))) - sin(sin(cos(x4)))) - sin(sin(sin(cos(x1))))) - cos(x3)),(((((0 - sin(cos(x0))) - sin(sin(cos(x4)))) - sin(sin(sin(cos(x1))))) - cos(x3))) * 0.19258146727228825 + 0.5498083663686923,0.01824420480454861,19,4.421897888183594,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,0.018954992294311523
keijzer4,x1**3 * exp(-x1) * cos(x1) * sin(x1) * (sin(x1)**2 * cos(x1) - 1),x_1^3 \cdot e^{-x_1} \cdot \cos(x_1) \cdot \sin(x_1) \cdot (\sin^2(x_1) \cdot \cos(x_1) - 1),(sin((x0 - sin(sin(x0)))) - sin((x0 + (sin(x0) - sin((x0 + x0)))))),((sin((x0 - sin(sin(x0)))) - sin((x0 + (sin(x0) - sin((x0 + x0))))))) * 0.2581546332775197 + 0.01540764191512382,0.02269684912927867,17,1.0703201293945312,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,0.019131898880004883
keijzer11,x1 * x2 + sin((x1 - 1) * (x2 - 1)),x_1 \cdot x_2 + \sin((x_1 - 1) \cdot (x_2 - 1)),(x1 * (x0 / 3.0)),((x1 * (x0 / 3.0))) * 3.6042245021966974 + -0.40085851731192035,1.263381255399953,5,0.6176939010620117,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,0.018803119659423828
keijzer13,6 * sin(x1) * cos(x2),6 \cdot \sin(x_1) \cdot \cos(x_2),((exp(-1.0) / ((cos(x1) / (-0.5 - x1)) - (exp(x0) / (x1 - x0)))) / x1),(((exp(-1.0) / ((cos(x1) / (-0.5 - x1)) - (exp(x0) / (x1 - x0)))) / x1)) * 3.1434141199215655 + 0.27450505213944004,3.3358090014231743,18,2.4229202270507812,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,0.018772125244140625
keijzer14,8 / (2 + x1**2 + x2**2),\frac{8}{2 + x_1^2 + x_2^2},cos((cos((exp(cos(x1)) / x1)) * x1)),(cos((cos((exp(cos(x1)) / x1)) * x1))) * 0.6351213218038404 + 1.2669917066301344,0.09197491650818686,9,0.8674590587615967,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,0.019106149673461914
vlad2,exp(-x1) * x1**3 * (cos(x1) * sin(x1)) * (cos(x1) * sin(x1)**2 - 1),e^{-x_1} \cdot x_1^3 \cdot \cos(x_1) \cdot \sin(x_1) \cdot (\cos(x_1) \cdot \sin^2(x_1) - 1),sin(sin((sin((x0 + x0)) / -0.5))),(sin(sin((sin((x0 + x0)) / -0.5)))) * 0.2631343933472731 + 0.01480415732887064,0.03424874660772109,8,0.9304239749908447,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,0.021551847457885742
vlad1,exp(-((x1 - 1) ** 2)) / (1.2 + (x2 - 2.5) ** 2),\frac{e^{-(x_1-1)^2}}{1.2 + (x_2-2.5)^2},cos((exp((0.5 * cos(x1))) - (x0 * cos(x0)))),(cos((exp((0.5 * cos(x1))) - (x0 * cos(x0))))) * 0.23508942595595514 + 0.21113399608377065,0.015602019450064094,11,1.5051801204681396,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,42.61230397224426
vlad5,30 * (x1 - 1) * (x3 - 1) / ((x1 - 10) * x2**2),\frac{30 \cdot (x_1 - 1) \cdot (x_3 - 1)}{(x_1 - 10) \cdot x_2^2},(((x0 * x0) - ((exp(0.5) - x0) + (exp(0.5) - x0))) / exp((((x2 * x1) * x1) * exp(((x2 * x2) * (x2 * x2)))))),((((x0 * x0) - ((exp(0.5) - x0) + (exp(0.5) - x0))) / exp((((x2 * x1) * x1) * exp(((x2 * x2) * (x2 * x2))))))) * 0.5607545815969233 + 0.023395347782829635,0.1372990796920711,29,3.823179006576538,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,0.018812894821166992
vlad3,exp(-x1) * x1**3 * (cos(x1) * sin(x1)) * (cos(x1) * sin(x1)**2 - 1) * (x2 - 5),e^{-x_1} \cdot x_1^3 \cdot \cos(x_1) \cdot \sin(x_1) \cdot (\cos(x_1) \cdot \sin^2(x_1) - 1) \cdot (x_2 - 5),(sin((sin(((10.0 / x1) - x1)) / (sin((x1 / x1)) / x1))) / x1),((sin((sin(((10.0 / x1) - x1)) / (sin((x1 / x1)) / x1))) / x1)) * 0.8383335126824994 + -0.06302875743618377,0.5814180760196783,16,1.418816089630127,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,0.019566059112548828
keijzer12,x1**4 - x1**3 + (x2**2 / 2) - x2,x_1^4 - x_1^3 + \frac{x_2^2}{2} - x_2,exp(((x0 * x0) * exp(x1))),(exp(((x0 * x0) * exp(x1)))) * 26.340277811806285 + 19.240307221553685,3.269249492474022e+45,7,0.7919549942016602,"Error: ArgumentError: Dict(kv): kv needs to be an iterator of tuples or pairs
Stacktrace:
 [1] Dict(kv::Vector{Any})
   @ Base ./dict.jl:112
 [2] build_constraints(una_constraints::Vector{Any}, bin_constraints::Vector{Any}, unary_operators::Vector{Function}, binary_operators::Vector{Function}, nuna::Int64, nbin::Int64)
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:52
 [3] Options(; binary_operators::Vector{Function}, unary_operators::Vector{Function}, constraints::Nothing, elementwise_loss::typeof(loss), loss_function::Nothing, tournament_selection_n::Int64, tournament_selection_p::Float64, topn::Int64, complexity_of_operators::Nothing, complexity_of_constants::Int64, complexity_of_variables::Int64, parsimony::Float64, dimensional_constraint_penalty::Nothing, alpha::Float64, maxsize::Int64, maxdepth::Int64, turbo::Bool, bumper::Bool, migration::Bool, hof_migration::Bool, should_simplify::Nothing, should_optimize_constants::Bool, output_file::String, node_type::Type, populations::Int64, perturbation_factor::Float64, annealing::Bool, batching::Bool, batch_size::Int64, mutation_weights::MutationWeights, crossover_probability::Float64, warmup_maxsize_by::Float64, use_frequency::Bool, use_frequency_in_tournament::Bool, adaptive_parsimony_scaling::Float64, population_size::Int64, ncycles_per_iteration::Int64, fraction_replaced::Float64, fraction_replaced_hof::Float64, verbosity::Nothing, print_precision::Int64, save_to_file::Bool, probability_negate_constant::Float64, seed::UInt32, bin_constraints::Vector{Any}, una_constraints::Vector{Any}, progress::Nothing, terminal_width::Nothing, optimizer_algorithm::String, optimizer_nrestarts::Int64, optimizer_probability::Float64, optimizer_iterations::Int64, optimizer_f_calls_limit::Nothing, optimizer_options::Nothing, use_recorder::Bool, recorder_file::String, early_stop_condition::Nothing, timeout_in_seconds::Int64, max_evals::Nothing, skip_mutation_failures::Bool, nested_constraints::Nothing, deterministic::Bool, define_helper_functions::Bool, deprecated_return_state::Nothing, fast_cycle::Bool, npopulations::Int64, npop::Int64, kws::@Kwargs{enable_autodiff::Bool})
   @ SymbolicRegression.CoreModule.OptionsModule ~/.julia/packages/SymbolicRegression/Lfn1H/src/Options.jl:635
 [4] pyjlany_call(self::Type{Options}, args_::Py, kwargs_::Py)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/any.jl:36
 [5] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
   @ PythonCall.JlWrap ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/base.jl:72
 [6] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
   @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/bb3ax/src/JlWrap/C.jl:63",inf,0,0.01902318000793457
